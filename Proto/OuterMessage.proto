syntax = "proto3";
package ET;

//ResponseType M2C_TestResponse
message C2M_TestRequest // IActorLocationRequest
{
	int32 RpcId = 90;
	string request = 1;
	repeated string key = 2;
	repeated string value = 3;
}

message M2C_TestResponse // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string response = 1;
}

//ResponseType Actor_TransferResponse
message Actor_TransferRequest // IActorLocationRequest
{
	int32 RpcId = 90;
	int32 MapIndex = 1;
}

message Actor_TransferResponse // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType G2C_EnterMap
message C2G_EnterMap // IRequest
{
	int32 RpcId = 1;
}

message G2C_EnterMap // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	// 自己unitId
	int64 MyId = 4;
}

message MoveInfo
{
	repeated float X = 1;
	repeated float Y = 2;
	repeated float Z = 3;

	float A = 4;
	float B = 5;
	float C = 6;
	float W = 7;
	int32 TurnSpeed = 8;
}

message UnitInfo
{
	int64 UnitId = 1;
	int32 ConfigId = 2;
	int32 Type = 3;
	float X = 4;
	float Y = 5;
	float Z = 6;
	float ForwardX = 7;
	float ForwardY = 8;
	float ForwardZ = 9;
	repeated int32 Ks = 10;
	repeated int64 Vs = 11;
	MoveInfo MoveInfo = 12;
}

message M2C_CreateUnits // IActorMessage
{
	repeated UnitInfo Units = 2;
}

message M2C_CreateMyUnit // IActorMessage
{
	UnitInfo Unit = 1;
}

message M2C_StartSceneChange // IActorMessage
{
	int64 SceneInstanceId = 1;
	string SceneName = 2;	
}

message M2C_RemoveUnits // IActorMessage
{
	repeated int64 Units = 2;
}

message C2M_PathfindingResult // IActorLocationMessage
{
	int32 RpcId = 90;

	float X = 1;
	float Y = 2;
	float Z = 3;
}

message C2M_Stop // IActorLocationMessage
{
	int32 RpcId = 90;
}

message M2C_PathfindingResult // IActorMessage
{
	int64 Id = 1;

	float X = 2;
	float Y = 3;
	float Z = 4;

	repeated float Xs = 5;
	repeated float Ys = 6;
	repeated float Zs = 7;
}

message M2C_Stop // IActorMessage
{
	int32 Error = 1;

	int64 Id = 2;
	float X = 3;
	float Y = 4;
	float Z = 5;

	float A = 6;
	float B = 7;
	float C = 8;
	float W = 9;
}

//ResponseType G2C_Ping
message C2G_Ping // IRequest
{
	int32 RpcId = 90;
}

message G2C_Ping // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;

	int64 Time = 1;
}


message G2C_Test // IMessage
{
}

//ResponseType M2C_Reload
message C2M_Reload // IRequest
{
	int32 RpcId = 90;
	string Account = 1;
	string Password = 2;
}

message M2C_Reload // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType R2C_Login
message C2R_Login // IRequest
{
	int32 RpcId = 90;
	string  Account = 1;  // 帐号
	string  Password = 2;  // 密码
}

message R2C_Login // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string Address = 1;
	int64 Key = 2;
	int64 GateId = 3;
}

//ResponseType G2C_LoginGate
message C2G_LoginGate // IRequest
{
	int32 RpcId = 90;
	int64 Key = 1;  // 帐号
	int64 GateId = 2;
}

message G2C_LoginGate // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	int64 PlayerId = 1;
}

message G2C_TestHotfixMessage // IMessage
{
	string Info = 1;
}

//ResponseType M2C_TestRobotCase
message C2M_TestRobotCase // IActorLocationRequest
{
	int32 RpcId = 90;
	int32 N = 1;
}

message M2C_TestRobotCase // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	int32 N = 1;
}

//ResponseType M2C_TransferMap
message C2M_TransferMap // IActorLocationRequest
{
	int32 RpcId = 1;
}

message M2C_TransferMap // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}
//ResponseType R2C_LoginTest
message C2R_LoginTest //IRequest
{
	int32 RpcId = 90;
	string Account = 1;
	string Password = 2;
}
message R2C_LoginTest //IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string GateAddress = 1;
	string key = 2;
}

message C2R_SayHello //IMessage
{
	string Hello = 1;
}
message R2C_SayGoodBye //IMessage
{
	string GoodBye = 1;
}
//ResponseType M2C_TestActorLocationResponse
message C2M_TestActorLocationRequest //IActorLocationRequest
{
	int32 RpcId = 90;
	string Content = 1;
}

message M2C_TestActorLocationResponse	//IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string Content = 1;
}

message C2M_TestActorLocationMessage	//IActorLocationMessage
{
	int32 RpcId = 90;
	string Content = 1;
}
message M2C_TestActorMessage //IActorMessage
{
	string Content = 1;
}

message C2M_MatchRoomActorLocationMessage //IActorLocationMessage
{
	int32 RpcId = 90;
	string Content = 1;
}
message M2C_SyncCurrentMatchingCount	//IActorMessage
{
	int32 Content = 1;
}
//ResponseType A2C_LoginAccount
message C2A_LoginAccount //IRequest
{
	int32 RpcId = 90;
	string AccountName = 1;
	string Password = 2;
}
message A2C_LoginAccount //IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string Token = 1;
	int64 AccountId = 2;
}
message ServerInfoProto
{
	int64 Id = 1;
	int32 Status = 2;
	string ServerName = 3;
}

//ResponseType A2C_GetServerInfo
message C2A_GetServerInfo //IRequest
{
	int32 RpcId = 90;
	string Token = 1;
	int64 AccountId = 2;
}
message A2C_GetServerInfo //IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	repeated ServerInfoProto ServerInfoList = 1;
}
//ResponseType A2C_GetRealmKey
message C2A_GetRealmKey //IRequest
{
	int32 RpcId = 90;
	string Token = 1;
	int64 ServerId = 2;
	int64 AccountId = 3;
}
message A2C_GetRealmKey //IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string RealmKey = 1;
	string RealmAddress = 2;
}
//ResponseType R2A_GetRealmKey
message A2R_GetRealmKey //IActorRequest
{
	int32 RpcId = 90;
	int64 AccountId = 1;
}
message R2A_GetRealmKey	//IActorResponse
{
	int RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string Token = 1;
}
//ResponseType R2C_LoginRealm
message C2R_LoginRealm //IRequest
{
	int RpcId = 90;
	int64 AccountId = 1;
	string Token = 2;
}
message R2C_LoginRealm //IResponse
{
	int RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string GateAddress = 1;
	int64 GateKey = 2;
}
//ResponseType G2C_LoginGate
message C2G_LoginGateRequeset //IRequest
{
	int RpcId = 90;
	int64 GateKey = 1;
	int64 AccountId = 2;
}
message G2C_LoginGateResponse //IResponse
{
	int RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	int64 PlayerId = 1;
}
//ResponseType M2C_MatchRoomResponse
message C2M_MatchRoomRequest //IActorLocationRequest
{
	int RpcId = 90;
}
message M2C_MatchRoomResponse //IActorLocationResponse
{
	int RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}
//ResponseType M2C_CancelMatchRoomResponse
message C2M_CancelMatchRoomRequest  //IActorLocationRequest
{
	int RpcId = 90;
}

message M2C_CancelMatchRoomResponse //IActorLocationResponse
{
	int RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

message M2C_SyncCreateRoomMessage	//IActorMessage
{
	int RpcId = 90;
	int32 InRoomIndex = 1;			//在房间里面的座位号
}


message DiamondInfo
{
	int64 Id = 1;
	int32 HangIndex = 2;
	int32 LieIndex = 3;
	int32 DiamondType = 4;
	int32 InitLieIndex = 5;
	int32 InitHangIndex = 6;
	int32 BoomType = 7;			
	int64 HeroCardId = 8;
	float HeroCardAddAttack = 9;
	float HeroCardEndAttack = 10;
	float HeroCardAddAngry = 11;
	float HeroCardEndAngry = 12;
}
message M2C_InitMapData //IActorMessage
{
	//初始化地图数据
	int RpcId = 90;
	repeated DiamondInfo DiamondInfo = 1;
}

//同步房间信息
message M2C_SyncRoomInfo	//IActorMessage
{
	int RpcId = 90;	
	int64 RoomId = 1;
	int32 TurnIndex = 2;
	int32 MySeatIndex = 3;
	int32 SeatCount = 4;	//房间里面人物的总人数
}
message C2M_PlayerScrollScreen //IActorLocationMessage
{
	int RpcId = 90;
	int32 StartX = 1;
	int32 StartY = 2;

	int32 DirType = 3;
	int64 RoomId = 4;
}

message M2C_ChangeCurrentTurnSeatIndex	//IActorMessage
{
	int RpcId = 90;
	int32 CurrentTurnIndex = 1;
}

message M2C_SyncDiamondUpdatePos	//IActorMessage
{
	int RpcId = 90;
	repeated DiamondInfo DiamondInfos = 1;
}
message DiamondAction
{
	//宝石的action
	int32 PpcId = 90;
	int32 ActionType = 1;
	DiamondInfo DiamondInfo = 2;
}
message DiamondActionItem
{
	repeated DiamondAction DiamondActions = 1;
}

message AttackAction
{
	HeroCardInfo AttackHeroCardInfo = 1;
	repeated HeroCardInfo BeAttackHeroCardInfo = 2;
}
message AttackActionItem
{
	repeated AttackAction AttackActions = 1;
}
message M2C_SyncDiamondAction //IActorMessage
{
	int32 RpcId = 90;
	repeated DiamondActionItem DiamondActionItems = 1;
	repeated AttackActionItem AttackActionItems = 2;
}
message SkillInfo
{
	//技能类型
	int64 SkillId = 1;
	string SkillName = 2;
	int32 SkillType = 3;
	int32 SkillConfigId = 4;
	string SkillAnimName = 5;
	int64 OwnerId = 6;

}
message HeroCardInfo
{
	int64 HeroId = 1;
	string HeroName = 2;
	int32 ConfigId = 3;
	int64 OwnerId = 4;
	int64 TroopId = 5;
	int32 InTroopIndex = 6;
	int32 CampIndex = 7;//阵营index
	int32 HeroColor = 8;			//颜色属性	
	int64 CastSkillId = 9;	//技能类型
	float CurrentAttack = 10;	//当前的攻击力
	float HP = 11;			//血量
	repeated SkillInfo SkillInfos = 12; //技能列表

	// repeated long SkillIdList = 11;	//技能id
}

//ResponseType M2C_GetAllHeroCardListResponse
message C2M_GetAllHeroCardListRequest //IActorLocationRequest
{
	int RpcId = 90;
	int64 Account = 1;
}
message M2C_GetAllHeroCardListResponse //IActorLocationResponse
{
	int RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	repeated HeroCardInfo HeroCardInfos = 1;
}
//ResponseType M2C_CallHeroCardResponse
message C2M_CallHeroCardRequest //IActorLocationRequest
{
	int32 RpcId = 90;
	int64 Account = 1;
}
message M2C_CallHeroCardResponse	//IActorLocationResponse
{
	int RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	HeroCardInfo HeroCardInfo = 1;
}

message TroopInfo
{
	int64 TroopId = 1;
}
//ResponseType M2C_GetAllTroopInfosResponse
message C2M_GetAllTroopInfosRequest	//IActorLocationRequest
{
	int32 RpcId = 90;
	int64 Account = 1;
}
message M2C_GetAllTroopInfosResponse //IActorLocationResponse
{
	int RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	repeated TroopInfo TroopInfos = 1;
}
//ResponseType M2C_CreateTroopResponse
message C2M_CreateTroopRequest //IActorLocationRequest
{
	int32 RpcId = 90;
	int64 AccountId = 1;
}
message M2C_CreateTroopResponse //IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	TroopInfo TroopInfo = 1;
}
//ResponseType M2C_GetHeroInfosWithTroopIdResponse
message C2M_GetHeroInfosWithTroopIdRequest //IActorLocationRequest
{
	int32 RpcId = 90;
	int64 TroopId = 1;
}
message M2C_GetHeroInfosWithTroopIdResponse //IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	repeated HeroCardInfo HeroCardInfos = 1;
}
//ResponseType M2C_SetHeroToTroopResponse
message C2M_SetHeroToTroopRequest //IActorLocationRequest
{
	int32 RpcId = 90;
	int64 TroopId = 1;
	int64 HeroId = 2;
	int32 InTroopIndex = 3;
}
message M2C_SetHeroToTroopResponse //IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	HeroCardInfo HeroCardInfo = 1;
}
//ResponseType M2C_StartPVEGameResponse
message C2M_StartPVEGameRequest //IActorLocationRequest
{
	int32 RpcId = 90;
	int64 AccoundId = 1;
	int64 TroopId = 2;	//队伍id

}
message M2C_StartPVEGameResponse //IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}
message C2M_GameReadyMessage //IActorLocationMessage
{
	int32 RpcId = 90;
	int64 AccountId = 1;
}

message M2C_CreateHeroCardInRoom //IActorMessage
{
	repeated HeroCardInfo HeroCardInfos = 1;
	repeated SkillInfo SkillInfos = 2;
}
//ResponseType M2C_PlayerReadyTurnResponse
message C2M_PlayerReadyTurnRequest //IActorLocationRequest
{
	int32 RpcId = 90;
	int64 AccountId = 1;
	int64 RoomId = 2;	//房间iD
}
message M2C_PlayerReadyTurnResponse //IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}
message M2C_SyncHeroCardTurnData	//IActorMessage
{
	repeated HeroCardInfo HeroCardInfos = 1;
}